
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
  folders       Folder[]
  link          Link[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("verification")
}


model Profile {
  id         String   @id @default(uuid()) @db.Uuid
  name       String
  email      String   @unique
  avatarUrl  String?  @map("avatar_url")
  role       Role     @default(USER)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  posts      Post[]

  @@map("profiles")
}

model Post {
  id            String    @id @default(uuid()) @db.Uuid
  title         String
  slug          String    @unique
  excerpt       String
  content       String
  featuredImage String?   @map("featured_image")
  tags          String[]
  published     Boolean   @default(false)
  publishedAt   DateTime? @map("published_at")
  authorId      String    @db.Uuid
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  author        Profile   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
  @@index([publishedAt])
  @@index([slug])
  @@index([authorId])
}

enum Role {
  USER
  ADMIN
}